// Code generated by MockGen. DO NOT EDIT.
// Source: repositories_ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/FredySosa/AWS-Go-Test/createData/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPostsRepositoryPort is a mock of PostsRepositoryPort interface.
type MockPostsRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepositoryPortMockRecorder
}

// MockPostsRepositoryPortMockRecorder is the mock recorder for MockPostsRepositoryPort.
type MockPostsRepositoryPortMockRecorder struct {
	mock *MockPostsRepositoryPort
}

// NewMockPostsRepositoryPort creates a new mock instance.
func NewMockPostsRepositoryPort(ctrl *gomock.Controller) *MockPostsRepositoryPort {
	mock := &MockPostsRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockPostsRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsRepositoryPort) EXPECT() *MockPostsRepositoryPortMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostsRepositoryPort) CreatePost(ctx context.Context, post domain.PostToSave) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsRepositoryPortMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsRepositoryPort)(nil).CreatePost), ctx, post)
}
