// Code generated by MockGen. DO NOT EDIT.
// Source: services_ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/FredySosa/AWS-Go-Test/createData/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPostsServicePort is a mock of PostsServicePort interface.
type MockPostsServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockPostsServicePortMockRecorder
}

// MockPostsServicePortMockRecorder is the mock recorder for MockPostsServicePort.
type MockPostsServicePortMockRecorder struct {
	mock *MockPostsServicePort
}

// NewMockPostsServicePort creates a new mock instance.
func NewMockPostsServicePort(ctrl *gomock.Controller) *MockPostsServicePort {
	mock := &MockPostsServicePort{ctrl: ctrl}
	mock.recorder = &MockPostsServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsServicePort) EXPECT() *MockPostsServicePortMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostsServicePort) CreatePost(ctx context.Context, request domain.CreationRequest) (domain.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, request)
	ret0, _ := ret[0].(domain.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsServicePortMockRecorder) CreatePost(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsServicePort)(nil).CreatePost), ctx, request)
}
